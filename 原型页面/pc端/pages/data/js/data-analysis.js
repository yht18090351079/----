// Âú∞Ë¥®ÁÅæÂÆ≥È¢ÑË≠¶Á≥ªÁªü - Êï∞ÊçÆÂàÜÊûêÈ°µÈù¢ËÑöÊú¨

// ========== ÂÖ®Â±ÄÂèòÈáè ==========
let charts = {};
let currentFilters = {};
let updateInterval = null;

// ========== È°µÈù¢ÂàùÂßãÂåñ ==========
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîÑ Êï∞ÊçÆÂàÜÊûêÈ°µÈù¢ÂàùÂßãÂåñ...');

    // ÂàùÂßãÂåñÁ≠õÈÄâÂô®‰∫ã‰ª∂
    initializeFilters();

    // ÂàùÂßãÂåñÂõæË°®
    initializeCharts();

    // ËÆæÁΩÆËá™Âä®Êõ¥Êñ∞
    startAutoUpdate();

    // Êõ¥Êñ∞ÊúÄÂêéÊõ¥Êñ∞Êó∂Èó¥
    updateLastUpdateTime();

    console.log('‚úÖ Êï∞ÊçÆÂàÜÊûêÈ°µÈù¢ÂàùÂßãÂåñÂÆåÊàê');
});

// ========== ÂàùÂßãÂåñÁ≠õÈÄâÂô® ==========
function initializeFilters() {
    // Êó∂Èó¥ËåÉÂõ¥ÂèòÂåñÁõëÂê¨
    const timeRange = document.getElementById('timeRange');
    timeRange.addEventListener('change', function() {
        const customTimeRange = document.getElementById('customTimeRange');
        if (this.value === 'custom') {
            customTimeRange.style.display = 'block';
            setDefaultCustomTime();
        } else {
            customTimeRange.style.display = 'none';
        }
    });

    // ÁõëÊµãÁÇπÈÄâÊã©ÂèòÂåñÁõëÂê¨
    const pointCheckboxes = document.querySelectorAll('#monitoringPoints input[type="checkbox"]');
    pointCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', updateChartsData);
    });

    // Êï∞ÊçÆÁ±ªÂûãÈÄâÊã©ÂèòÂåñÁõëÂê¨
    const typeCheckboxes = document.querySelectorAll('#dataTypes input[type="checkbox"]');
    typeCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', updateChartsData);
    });

    // Êï∞ÊçÆË¥®ÈáèÈÄâÊã©ÂèòÂåñÁõëÂê¨
    const qualityRadios = document.querySelectorAll('#dataQuality input[type="radio"]');
    qualityRadios.forEach(radio => {
        radio.addEventListener('change', updateChartsData);
    });
}

// ========== ËÆæÁΩÆÈªòËÆ§Ëá™ÂÆö‰πâÊó∂Èó¥ ==========
function setDefaultCustomTime() {
    const now = new Date();
    const endTime = new Date(now);
    const startTime = new Date(now.getTime() - 24 * 60 * 60 * 1000); // 24Â∞èÊó∂Ââç

    document.getElementById('startTime').value = formatDateTimeLocal(startTime);
    document.getElementById('endTime').value = formatDateTimeLocal(endTime);
}

// ========== Ê†ºÂºèÂåñÊó•ÊúüÊó∂Èó¥ ==========
function formatDateTimeLocal(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');

    return `${year}-${month}-${day}T${hours}:${minutes}`;
}

// ========== ÂàùÂßãÂåñÂõæË°® ==========
function initializeCharts() {
    // ÂàùÂßãÂåñÂÆûÊó∂Êï∞ÊçÆÊäòÁ∫øÂõæ
    initLineChart();

    // ÂàùÂßãÂåñËÆæÂ§áÁä∂ÊÄÅÈ•ºÂõæ
    initPieChart();

    // ÂàùÂßãÂåñÈ¢ÑË≠¶ÁªüËÆ°Êü±Áä∂Âõæ
    initBarChart();

    // ÂàùÂßãÂåñÈ£éÈô©ÁÉ≠ÂäõÂõæ
    initHeatmapChart();
}

// ========== ÂàùÂßãÂåñÊäòÁ∫øÂõæ ==========
function initLineChart() {
    const chartDom = document.getElementById('lineChart');
    const myChart = echarts.init(chartDom, 'dark');
    charts.lineChart = myChart;

    // ÁîüÊàêÊ®°ÊãüÊó∂Èó¥Êï∞ÊçÆ
    const times = [];
    const now = new Date();
    for (let i = 23; i >= 0; i--) {
        const time = new Date(now.getTime() - i * 60 * 60 * 1000);
        times.push(time.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' }));
    }

    const option = {
        title: {
            text: 'ÁõëÊµãÊï∞ÊçÆË∂ãÂäø',
            textStyle: {
                color: '#00ffff',
                fontSize: 14
            }
        },
        tooltip: {
            trigger: 'axis',
            backgroundColor: 'rgba(0, 25, 50, 0.9)',
            borderColor: 'rgba(0, 255, 255, 0.3)',
            textStyle: {
                color: '#ccddff'
            }
        },
        legend: {
            data: ['‰ΩçÁßª', 'ÈôçÈõ®Èáè', 'ÂúüÂ£§Âê´Ê∞¥Èáè'],
            textStyle: {
                color: '#99ccff'
            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'category',
            boundaryGap: false,
            data: times,
            axisLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.3)'
                }
            },
            axisLabel: {
                color: '#99ccff'
            }
        },
        yAxis: {
            type: 'value',
            axisLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.3)'
                }
            },
            axisLabel: {
                color: '#99ccff'
            },
            splitLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.1)'
                }
            }
        },
        series: [
            {
                name: '‰ΩçÁßª',
                type: 'line',
                smooth: true,
                data: generateRandomData(24, 0, 10),
                lineStyle: {
                    color: '#00ffff'
                },
                areaStyle: {
                    color: {
                        type: 'linear',
                        x: 0,
                        y: 0,
                        x2: 0,
                        y2: 1,
                        colorStops: [
                            { offset: 0, color: 'rgba(0, 255, 255, 0.3)' },
                            { offset: 1, color: 'rgba(0, 255, 255, 0.05)' }
                        ]
                    }
                }
            },
            {
                name: 'ÈôçÈõ®Èáè',
                type: 'line',
                smooth: true,
                data: generateRandomData(24, 0, 50),
                lineStyle: {
                    color: '#0099ff'
                },
                areaStyle: {
                    color: {
                        type: 'linear',
                        x: 0,
                        y: 0,
                        x2: 0,
                        y2: 1,
                        colorStops: [
                            { offset: 0, color: 'rgba(0, 153, 255, 0.3)' },
                            { offset: 1, color: 'rgba(0, 153, 255, 0.05)' }
                        ]
                    }
                }
            },
            {
                name: 'ÂúüÂ£§Âê´Ê∞¥Èáè',
                type: 'line',
                smooth: true,
                data: generateRandomData(24, 20, 80),
                lineStyle: {
                    color: '#00ff88'
                },
                areaStyle: {
                    color: {
                        type: 'linear',
                        x: 0,
                        y: 0,
                        x2: 0,
                        y2: 1,
                        colorStops: [
                            { offset: 0, color: 'rgba(0, 255, 136, 0.3)' },
                            { offset: 1, color: 'rgba(0, 255, 136, 0.05)' }
                        ]
                    }
                }
            }
        ]
    };

    myChart.setOption(option);

    // ÂìçÂ∫îÂºèË∞ÉÊï¥
    window.addEventListener('resize', function() {
        myChart.resize();
    });
}

// ========== ÂàùÂßãÂåñÈ•ºÂõæ ==========
function initPieChart() {
    const chartDom = document.getElementById('pieChart');
    const myChart = echarts.init(chartDom, 'dark');
    charts.pieChart = myChart;

    const option = {
        title: {
            text: 'ËÆæÂ§áÁä∂ÊÄÅÂàÜÂ∏É',
            textStyle: {
                color: '#00ffff',
                fontSize: 14
            }
        },
        tooltip: {
            trigger: 'item',
            backgroundColor: 'rgba(0, 25, 50, 0.9)',
            borderColor: 'rgba(0, 255, 255, 0.3)',
            textStyle: {
                color: '#ccddff'
            }
        },
        legend: {
            orient: 'vertical',
            left: 'left',
            textStyle: {
                color: '#99ccff'
            }
        },
        series: [
            {
                name: 'ËÆæÂ§áÁä∂ÊÄÅ',
                type: 'pie',
                radius: '50%',
                data: [
                    { value: 85, name: 'Ê≠£Â∏∏ËÆæÂ§á', itemStyle: { color: '#00ff88' } },
                    { value: 8, name: 'ÂºÇÂ∏∏ËÆæÂ§á', itemStyle: { color: '#ff4444' } },
                    { value: 5, name: 'Á¶ªÁ∫øËÆæÂ§á', itemStyle: { color: '#666666' } },
                    { value: 2, name: 'Áª¥Êä§ËÆæÂ§á', itemStyle: { color: '#ffaa00' } }
                ],
                emphasis: {
                    itemStyle: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 255, 255, 0.5)'
                    }
                },
                label: {
                    color: '#ccddff'
                }
            }
        ]
    };

    myChart.setOption(option);

    // ÂìçÂ∫îÂºèË∞ÉÊï¥
    window.addEventListener('resize', function() {
        myChart.resize();
    });
}

// ========== ÂàùÂßãÂåñÊü±Áä∂Âõæ ==========
function initBarChart() {
    const chartDom = document.getElementById('barChart');
    const myChart = echarts.init(chartDom, 'dark');
    charts.barChart = myChart;

    const option = {
        title: {
            text: 'È¢ÑË≠¶ÁªüËÆ°ÂàÜÊûê',
            textStyle: {
                color: '#00ffff',
                fontSize: 14
            }
        },
        tooltip: {
            trigger: 'axis',
            backgroundColor: 'rgba(0, 25, 50, 0.9)',
            borderColor: 'rgba(0, 255, 255, 0.3)',
            textStyle: {
                color: '#ccddff'
            }
        },
        legend: {
            data: ['ËìùËâ≤È¢ÑË≠¶', 'ÈªÑËâ≤È¢ÑË≠¶', 'Ê©ôËâ≤È¢ÑË≠¶', 'Á∫¢Ëâ≤È¢ÑË≠¶'],
            textStyle: {
                color: '#99ccff'
            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'category',
            data: ['ÊªëÂù°', 'Ê≥•Áü≥ÊµÅ', 'Â¥©Â°å', 'Âú∞Èô∑'],
            axisLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.3)'
                }
            },
            axisLabel: {
                color: '#99ccff'
            }
        },
        yAxis: {
            type: 'value',
            axisLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.3)'
                }
            },
            axisLabel: {
                color: '#99ccff'
            },
            splitLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.1)'
                }
            }
        },
        series: [
            {
                name: 'ËìùËâ≤È¢ÑË≠¶',
                type: 'bar',
                stack: 'È¢ÑË≠¶',
                data: [5, 3, 2, 1],
                itemStyle: {
                    color: '#1890FF'
                }
            },
            {
                name: 'ÈªÑËâ≤È¢ÑË≠¶',
                type: 'bar',
                stack: 'È¢ÑË≠¶',
                data: [3, 4, 2, 2],
                itemStyle: {
                    color: '#FADB14'
                }
            },
            {
                name: 'Ê©ôËâ≤È¢ÑË≠¶',
                type: 'bar',
                stack: 'È¢ÑË≠¶',
                data: [2, 2, 1, 1],
                itemStyle: {
                    color: '#FA8C16'
                }
            },
            {
                name: 'Á∫¢Ëâ≤È¢ÑË≠¶',
                type: 'bar',
                stack: 'È¢ÑË≠¶',
                data: [1, 1, 0, 0],
                itemStyle: {
                    color: '#FF4D4F'
                }
            }
        ]
    };

    myChart.setOption(option);

    // ÂìçÂ∫îÂºèË∞ÉÊï¥
    window.addEventListener('resize', function() {
        myChart.resize();
    });
}

// ========== ÂàùÂßãÂåñÁÉ≠ÂäõÂõæ ==========
function initHeatmapChart() {
    const chartDom = document.getElementById('heatmapChart');
    const myChart = echarts.init(chartDom, 'dark');
    charts.heatmapChart = myChart;

    // ÁîüÊàêÁÉ≠ÂäõÂõæÊï∞ÊçÆ
    const data = [];
    const hours = ['00', '02', '04', '06', '08', '10', '12', '14', '16', '18', '20', '22'];
    const days = ['Âë®‰∏Ä', 'Âë®‰∫å', 'Âë®‰∏â', 'Âë®Âõõ', 'Âë®‰∫î', 'Âë®ÂÖ≠', 'Âë®Êó•'];

    for (let i = 0; i < days.length; i++) {
        for (let j = 0; j < hours.length; j++) {
            data.push([j, i, Math.round(Math.random() * 100)]);
        }
    }

    const option = {
        title: {
            text: 'Âå∫ÂüüÈ£éÈô©ÁÉ≠ÂäõÂõæ',
            textStyle: {
                color: '#00ffff',
                fontSize: 14
            }
        },
        tooltip: {
            position: 'top',
            backgroundColor: 'rgba(0, 25, 50, 0.9)',
            borderColor: 'rgba(0, 255, 255, 0.3)',
            textStyle: {
                color: '#ccddff'
            }
        },
        grid: {
            height: '50%',
            top: '10%'
        },
        xAxis: {
            type: 'category',
            data: hours,
            splitArea: {
                show: true
            },
            axisLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.3)'
                }
            },
            axisLabel: {
                color: '#99ccff'
            }
        },
        yAxis: {
            type: 'category',
            data: days,
            splitArea: {
                show: true
            },
            axisLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.3)'
                }
            },
            axisLabel: {
                color: '#99ccff'
            }
        },
        visualMap: {
            min: 0,
            max: 100,
            calculable: true,
            orient: 'horizontal',
            left: 'center',
            bottom: '15%',
            textStyle: {
                color: '#99ccff'
            },
            inRange: {
                color: ['#00ff88', '#ffaa00', '#ff4444']
            }
        },
        series: [
            {
                name: 'È£éÈô©ÂÄº',
                type: 'heatmap',
                data: data,
                label: {
                    show: true,
                    color: '#000'
                },
                emphasis: {
                    itemStyle: {
                        shadowBlur: 10,
                        shadowColor: 'rgba(0, 255, 255, 0.5)'
                    }
                }
            }
        ]
    };

    myChart.setOption(option);

    // ÂìçÂ∫îÂºèË∞ÉÊï¥
    window.addEventListener('resize', function() {
        myChart.resize();
    });
}

// ========== ÁîüÊàêÈöèÊú∫Êï∞ÊçÆ ==========
function generateRandomData(count, min, max) {
    const data = [];
    for (let i = 0; i < count; i++) {
        data.push(Math.round(Math.random() * (max - min) + min));
    }
    return data;
}

// ========== Â∫îÁî®Á≠õÈÄâÂô® ==========
function applyFilters() {
    // Êî∂ÈõÜÁ≠õÈÄâÊù°‰ª∂
    const selectedPoints = Array.from(document.querySelectorAll('#monitoringPoints input:checked')).map(cb => cb.value);
    const selectedTypes = Array.from(document.querySelectorAll('#dataTypes input:checked')).map(cb => cb.value);
    const timeRange = document.getElementById('timeRange').value;
    const quality = document.querySelector('#dataQuality input:checked').value;

    currentFilters = {
        points: selectedPoints,
        types: selectedTypes,
        timeRange: timeRange,
        quality: quality
    };

    // Êõ¥Êñ∞ÂõæË°®Êï∞ÊçÆ
    updateChartsData();

    showToast('success', 'Á≠õÈÄâÊù°‰ª∂Â∑≤Â∫îÁî®');
}

// ========== ÈáçÁΩÆÁ≠õÈÄâÂô® ==========
function resetFilters() {
    // ÈáçÁΩÆÁõëÊµãÁÇπÈÄâÊã©
    document.querySelectorAll('#monitoringPoints input[type="checkbox"]').forEach((cb, index) => {
        cb.checked = index < 2; // ÈªòËÆ§ÈÄâ‰∏≠Ââç‰∏§‰∏™
    });

    // ÈáçÁΩÆÊï∞ÊçÆÁ±ªÂûãÈÄâÊã©
    document.querySelectorAll('#dataTypes input[type="checkbox"]').forEach((cb, index) => {
        cb.checked = index < 2; // ÈªòËÆ§ÈÄâ‰∏≠Ââç‰∏§‰∏™
    });

    // ÈáçÁΩÆÊó∂Èó¥ËåÉÂõ¥
    document.getElementById('timeRange').value = '1d';
    document.getElementById('customTimeRange').style.display = 'none';

    // ÈáçÁΩÆÊï∞ÊçÆË¥®Èáè
    document.querySelector('#dataQuality input[value="all"]').checked = true;

    // Ê∏ÖÁ©∫Á≠õÈÄâÊù°‰ª∂
    currentFilters = {};

    // Êõ¥Êñ∞ÂõæË°®Êï∞ÊçÆ
    updateChartsData();

    showToast('info', 'Á≠õÈÄâÊù°‰ª∂Â∑≤ÈáçÁΩÆ');
}

// ========== Êõ¥Êñ∞ÂõæË°®Êï∞ÊçÆ ==========
function updateChartsData() {
    // ËøôÈáåÂèØ‰ª•Ê†πÊçÆÁ≠õÈÄâÊù°‰ª∂ÈáçÊñ∞ÁîüÊàêÊï∞ÊçÆ
    // ‰∏∫‰∫ÜÊºîÁ§∫ÔºåÊàë‰ª¨Âè™ÊòØÈáçÊñ∞ËÆæÁΩÆ‰∏Ä‰∫õÈöèÊú∫Êï∞ÊçÆ

    // Êõ¥Êñ∞ÊäòÁ∫øÂõæ
    if (charts.lineChart) {
        const option = charts.lineChart.getOption();
        option.series[0].data = generateRandomData(24, 0, 10);
        option.series[1].data = generateRandomData(24, 0, 50);
        option.series[2].data = generateRandomData(24, 20, 80);
        charts.lineChart.setOption(option);
    }

    // Êõ¥Êñ∞È•ºÂõæ
    if (charts.pieChart) {
        const option = charts.pieChart.getOption();
        const total = 100;
        const normal = Math.round(Math.random() * 20 + 80);
        const abnormal = Math.round(Math.random() * 10 + 5);
        const offline = Math.round(Math.random() * 8 + 2);
        const maintenance = total - normal - abnormal - offline;

        option.series[0].data = [
            { value: normal, name: 'Ê≠£Â∏∏ËÆæÂ§á' },
            { value: abnormal, name: 'ÂºÇÂ∏∏ËÆæÂ§á' },
            { value: offline, name: 'Á¶ªÁ∫øËÆæÂ§á' },
            { value: maintenance, name: 'Áª¥Êä§ËÆæÂ§á' }
        ];
        charts.pieChart.setOption(option);
    }

    console.log('üìä ÂõæË°®Êï∞ÊçÆÂ∑≤Êõ¥Êñ∞');
}

// ========== Âà∑Êñ∞ÂõæË°® ==========
function refreshChart(chartId) {
    if (charts[chartId]) {
        updateChartsData();
        showToast('success', 'ÂõæË°®Êï∞ÊçÆÂ∑≤Âà∑Êñ∞');
    }
}

// ========== ÂÖ®Â±èÊòæÁ§∫ÂõæË°® ==========
function fullscreenChart(chartId) {
    const sourceChart = charts[chartId];
    if (!sourceChart) return;

    // Ëé∑ÂèñÂéüÂõæË°®ÈÖçÁΩÆ
    const option = sourceChart.getOption();

    // ÊòæÁ§∫Ê®°ÊÄÅÊ°Ü
    document.getElementById('chartModal').style.display = 'block';

    // ËÆæÁΩÆÊ†áÈ¢ò
    const titles = {
        'lineChart': 'ÂÆûÊó∂ÁõëÊµãÊï∞ÊçÆË∂ãÂäø',
        'pieChart': 'ËÆæÂ§áÁä∂ÊÄÅÂàÜÂ∏É',
        'barChart': 'È¢ÑË≠¶ÁªüËÆ°ÂàÜÊûê',
        'heatmapChart': 'Âå∫ÂüüÈ£éÈô©ÁÉ≠ÂäõÂõæ'
    };
    document.getElementById('modalChartTitle').textContent = titles[chartId] || 'ÂõæË°®ËØ¶ÊÉÖ';

    // ÂàùÂßãÂåñÂÖ®Â±èÂõæË°®
    setTimeout(() => {
        const modalChartDom = document.getElementById('modalChart');
        const modalChart = echarts.init(modalChartDom, 'dark');
        modalChart.setOption(option);

        // ‰øùÂ≠òÂºïÁî®‰ª•‰æøÂÖ≥Èó≠Êó∂ÈîÄÊØÅ
        window.modalChart = modalChart;

        // ÂìçÂ∫îÂºèË∞ÉÊï¥
        const resizeHandler = () => modalChart.resize();
        window.addEventListener('resize', resizeHandler);
        window.modalChartResizeHandler = resizeHandler;
    }, 100);
}

// ========== ÂÖ≥Èó≠ÂÖ®Â±èÂõæË°® ==========
function closeChartModal() {
    document.getElementById('chartModal').style.display = 'none';

    // ÈîÄÊØÅÂÖ®Â±èÂõæË°®
    if (window.modalChart) {
        window.modalChart.dispose();
        window.modalChart = null;
    }

    // ÁßªÈô§‰∫ã‰ª∂ÁõëÂê¨
    if (window.modalChartResizeHandler) {
        window.removeEventListener('resize', window.modalChartResizeHandler);
        window.modalChartResizeHandler = null;
    }
}

// ========== ÂØºÂá∫Êï∞ÊçÆ ==========
function exportData() {
    showToast('info', 'Ê≠£Âú®ÁîüÊàêÊä•Âëä...');

    // Ê®°ÊãüÂØºÂá∫ËøáÁ®ã
    setTimeout(() => {
        showToast('success', 'Êï∞ÊçÆÊä•ÂëäÂ∑≤ÂØºÂá∫');
    }, 2000);
}

// ========== ÂØºÂá∫Á≠õÈÄâÊï∞ÊçÆ ==========
function exportFilteredData() {
    if (Object.keys(currentFilters).length === 0) {
        showToast('warning', 'ËØ∑ÂÖàÂ∫îÁî®Á≠õÈÄâÊù°‰ª∂');
        return;
    }

    showToast('info', 'Ê≠£Âú®ÂØºÂá∫Á≠õÈÄâÊï∞ÊçÆ...');

    // Ê®°ÊãüÂØºÂá∫ËøáÁ®ã
    setTimeout(() => {
        showToast('success', 'Á≠õÈÄâÊï∞ÊçÆÂ∑≤ÂØºÂá∫');
    }, 1500);
}

// ========== ÂºÄÂßãËá™Âä®Êõ¥Êñ∞ ==========
function startAutoUpdate() {
    updateInterval = setInterval(() => {
        updateChartsData();
        updateLastUpdateTime();
        updateOverviewCards();
    }, 30000); // 30ÁßíÊõ¥Êñ∞‰∏ÄÊ¨°
}

// ========== ÂÅúÊ≠¢Ëá™Âä®Êõ¥Êñ∞ ==========
function stopAutoUpdate() {
    if (updateInterval) {
        clearInterval(updateInterval);
        updateInterval = null;
    }
}

// ========== Êõ¥Êñ∞ÊúÄÂêéÊõ¥Êñ∞Êó∂Èó¥ ==========
function updateLastUpdateTime() {
    const now = new Date();
    const timeString = now.toLocaleString('zh-CN', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    document.getElementById('lastUpdateTime').textContent = timeString;
}

// ========== Êõ¥Êñ∞Ê¶ÇËßàÂç°Áâá ==========
function updateOverviewCards() {
    // Ê®°ÊãüÊï∞ÊçÆÊõ¥Êñ∞
    const onlineRate = (Math.random() * 5 + 95).toFixed(1);
    const integrityRate = (Math.random() * 10 + 90).toFixed(1);
    const abnormalRate = (Math.random() * 3 + 1).toFixed(1);

    document.getElementById('onlineDevices').textContent = onlineRate + '%';
    document.getElementById('dataIntegrity').textContent = integrityRate + '%';
    document.getElementById('abnormalData').textContent = abnormalRate + '%';
}

// ========== ÂÖ®Â±èÂàáÊç¢ ==========
function toggleFullscreen() {
    if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen();
    } else {
        document.exitFullscreen();
    }
}

// ========== ÊòæÁ§∫ÊèêÁ§∫Ê∂àÊÅØ ==========
function showToast(type, message) {
    // ÂàõÂª∫toastÂÖÉÁ¥†
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.textContent = message;

    // Ê∑ªÂä†Ê†∑Âºè
    Object.assign(toast.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        padding: '12px 20px',
        borderRadius: '8px',
        color: '#fff',
        fontWeight: '500',
        zIndex: '3000',
        opacity: '0',
        transform: 'translateX(100%)',
        transition: 'all 0.3s ease'
    });

    // ËÆæÁΩÆËÉåÊôØËâ≤
    const colors = {
        success: '#00ff88',
        error: '#ff4444',
        warning: '#ffaa00',
        info: '#00ffff'
    };
    toast.style.background = colors[type] || colors.info;

    // Ê∑ªÂä†Âà∞È°µÈù¢
    document.body.appendChild(toast);

    // ÊòæÁ§∫Âä®Áîª
    setTimeout(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateX(0)';
    }, 100);

    // Ëá™Âä®ÈöêËóè
    setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (document.body.contains(toast)) {
                document.body.removeChild(toast);
            }
        }, 300);
    }, 3000);
}

// ========== ‰∫ã‰ª∂ÁõëÂê¨ ==========

// ÁÇπÂáªÊ®°ÊÄÅÊ°ÜÂ§ñÈÉ®ÂÖ≥Èó≠
window.addEventListener('click', function(event) {
    const modal = document.getElementById('chartModal');
    if (event.target === modal) {
        closeChartModal();
    }
});

// ESCÈîÆÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeChartModal();
    }
});

// È°µÈù¢Âç∏ËΩΩÊó∂Ê∏ÖÁêÜ
window.addEventListener('beforeunload', function() {
    stopAutoUpdate();

    // ÈîÄÊØÅÊâÄÊúâÂõæË°®
    Object.values(charts).forEach(chart => {
        if (chart) {
            chart.dispose();
        }
    });
});

// ========== È°µÈù¢ÂàùÂßãÂåñ ==========
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîÑ Êï∞ÊçÆÂàÜÊûêÈ°µÈù¢ÂàùÂßãÂåñ...');
    
    // ÂàùÂßãÂåñÁ≠õÈÄâÂô®‰∫ã‰ª∂
    initializeFilters();
    
    // ÂàùÂßãÂåñÂõæË°®
    initializeCharts();
    
    // ËÆæÁΩÆËá™Âä®Êõ¥Êñ∞
    startAutoUpdate();
    
    // Êõ¥Êñ∞ÊúÄÂêéÊõ¥Êñ∞Êó∂Èó¥
    updateLastUpdateTime();
    
    console.log('‚úÖ Êï∞ÊçÆÂàÜÊûêÈ°µÈù¢ÂàùÂßãÂåñÂÆåÊàê');
});

// ========== ÂàùÂßãÂåñÁ≠õÈÄâÂô® ==========
function initializeFilters() {
    // Êó∂Èó¥ËåÉÂõ¥ÂèòÂåñÁõëÂê¨
    const timeRange = document.getElementById('timeRange');
    timeRange.addEventListener('change', function() {
        const customTimeRange = document.getElementById('customTimeRange');
        if (this.value === 'custom') {
            customTimeRange.style.display = 'block';
            setDefaultCustomTime();
        } else {
            customTimeRange.style.display = 'none';
        }
    });
    
    // ÁõëÊµãÁÇπÈÄâÊã©ÂèòÂåñÁõëÂê¨
    const pointCheckboxes = document.querySelectorAll('#monitoringPoints input[type="checkbox"]');
    pointCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', updateChartsData);
    });
    
    // Êï∞ÊçÆÁ±ªÂûãÈÄâÊã©ÂèòÂåñÁõëÂê¨
    const typeCheckboxes = document.querySelectorAll('#dataTypes input[type="checkbox"]');
    typeCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', updateChartsData);
    });
    
    // Êï∞ÊçÆË¥®ÈáèÈÄâÊã©ÂèòÂåñÁõëÂê¨
    const qualityRadios = document.querySelectorAll('#dataQuality input[type="radio"]');
    qualityRadios.forEach(radio => {
        radio.addEventListener('change', updateChartsData);
    });
}

// ========== ËÆæÁΩÆÈªòËÆ§Ëá™ÂÆö‰πâÊó∂Èó¥ ==========
function setDefaultCustomTime() {
    const now = new Date();
    const endTime = new Date(now);
    const startTime = new Date(now.getTime() - 24 * 60 * 60 * 1000); // 24Â∞èÊó∂Ââç
    
    document.getElementById('startTime').value = formatDateTimeLocal(startTime);
    document.getElementById('endTime').value = formatDateTimeLocal(endTime);
}

// ========== Ê†ºÂºèÂåñÊó•ÊúüÊó∂Èó¥ ==========
function formatDateTimeLocal(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${year}-${month}-${day}T${hours}:${minutes}`;
}

// ========== ÂàùÂßãÂåñÂõæË°® ==========
function initializeCharts() {
    // ÂàùÂßãÂåñÂÆûÊó∂Êï∞ÊçÆÊäòÁ∫øÂõæ
    initLineChart();
    
    // ÂàùÂßãÂåñËÆæÂ§áÁä∂ÊÄÅÈ•ºÂõæ
    initPieChart();
    
    // ÂàùÂßãÂåñÈ¢ÑË≠¶ÁªüËÆ°Êü±Áä∂Âõæ
    initBarChart();
    
    // ÂàùÂßãÂåñÈ£éÈô©ÁÉ≠ÂäõÂõæ
    initHeatmapChart();
}

// ========== ÂàùÂßãÂåñÊäòÁ∫øÂõæ ==========
function initLineChart() {
    const chartDom = document.getElementById('lineChart');
    const myChart = echarts.init(chartDom, 'dark');
    charts.lineChart = myChart;
    
    // ÁîüÊàêÊ®°ÊãüÊó∂Èó¥Êï∞ÊçÆ
    const times = [];
    const now = new Date();
    for (let i = 23; i >= 0; i--) {
        const time = new Date(now.getTime() - i * 60 * 60 * 1000);
        times.push(time.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' }));
    }
    
    const option = {
        title: {
            text: 'ÁõëÊµãÊï∞ÊçÆË∂ãÂäø',
            textStyle: {
                color: '#00ffff',
                fontSize: 14
            }
        },
        tooltip: {
            trigger: 'axis',
            backgroundColor: 'rgba(0, 25, 50, 0.9)',
            borderColor: 'rgba(0, 255, 255, 0.3)',
            textStyle: {
                color: '#ccddff'
            }
        },
        legend: {
            data: ['‰ΩçÁßª', 'ÈôçÈõ®Èáè', 'ÂúüÂ£§Âê´Ê∞¥Èáè'],
            textStyle: {
                color: '#99ccff'
            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'category',
            boundaryGap: false,
            data: times,
            axisLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.3)'
                }
            },
            axisLabel: {
                color: '#99ccff'
            }
        },
        yAxis: {
            type: 'value',
            axisLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.3)'
                }
            },
            axisLabel: {
                color: '#99ccff'
            },
            splitLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.1)'
                }
            }
        },
        series: [
            {
                name: '‰ΩçÁßª',
                type: 'line',
                smooth: true,
                data: generateRandomData(24, 0, 10),
                lineStyle: {
                    color: '#00ffff'
                },
                areaStyle: {
                    color: {
                        type: 'linear',
                        x: 0,
                        y: 0,
                        x2: 0,
                        y2: 1,
                        colorStops: [
                            { offset: 0, color: 'rgba(0, 255, 255, 0.3)' },
                            { offset: 1, color: 'rgba(0, 255, 255, 0.05)' }
                        ]
                    }
                }
            },
            {
                name: 'ÈôçÈõ®Èáè',
                type: 'line',
                smooth: true,
                data: generateRandomData(24, 0, 50),
                lineStyle: {
                    color: '#0099ff'
                },
                areaStyle: {
                    color: {
                        type: 'linear',
                        x: 0,
                        y: 0,
                        x2: 0,
                        y2: 1,
                        colorStops: [
                            { offset: 0, color: 'rgba(0, 153, 255, 0.3)' },
                            { offset: 1, color: 'rgba(0, 153, 255, 0.05)' }
                        ]
                    }
                }
            },
            {
                name: 'ÂúüÂ£§Âê´Ê∞¥Èáè',
                type: 'line',
                smooth: true,
                data: generateRandomData(24, 20, 80),
                lineStyle: {
                    color: '#00ff88'
                },
                areaStyle: {
                    color: {
                        type: 'linear',
                        x: 0,
                        y: 0,
                        x2: 0,
                        y2: 1,
                        colorStops: [
                            { offset: 0, color: 'rgba(0, 255, 136, 0.3)' },
                            { offset: 1, color: 'rgba(0, 255, 136, 0.05)' }
                        ]
                    }
                }
            }
        ]
    };
    
    myChart.setOption(option);
    
    // ÂìçÂ∫îÂºèË∞ÉÊï¥
    window.addEventListener('resize', function() {
        myChart.resize();
    });
}

// ========== ÂàùÂßãÂåñÈ•ºÂõæ ==========
function initPieChart() {
    const chartDom = document.getElementById('pieChart');
    const myChart = echarts.init(chartDom, 'dark');
    charts.pieChart = myChart;
    
    const option = {
        title: {
            text: 'ËÆæÂ§áÁä∂ÊÄÅÂàÜÂ∏É',
            textStyle: {
                color: '#00ffff',
                fontSize: 14
            }
        },
        tooltip: {
            trigger: 'item',
            backgroundColor: 'rgba(0, 25, 50, 0.9)',
            borderColor: 'rgba(0, 255, 255, 0.3)',
            textStyle: {
                color: '#ccddff'
            }
        },
        legend: {
            orient: 'vertical',
            left: 'left',
            textStyle: {
                color: '#99ccff'
            }
        },
        series: [
            {
                name: 'ËÆæÂ§áÁä∂ÊÄÅ',
                type: 'pie',
                radius: '50%',
                data: [
                    { value: 85, name: 'Ê≠£Â∏∏ËÆæÂ§á', itemStyle: { color: '#00ff88' } },
                    { value: 8, name: 'ÂºÇÂ∏∏ËÆæÂ§á', itemStyle: { color: '#ff4444' } },
                    { value: 5, name: 'Á¶ªÁ∫øËÆæÂ§á', itemStyle: { color: '#666666' } },
                    { value: 2, name: 'Áª¥Êä§ËÆæÂ§á', itemStyle: { color: '#ffaa00' } }
                ],
                emphasis: {
                    itemStyle: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 255, 255, 0.5)'
                    }
                },
                label: {
                    color: '#ccddff'
                }
            }
        ]
    };
    
    myChart.setOption(option);
    
    // ÂìçÂ∫îÂºèË∞ÉÊï¥
    window.addEventListener('resize', function() {
        myChart.resize();
    });
}

// ========== ÂàùÂßãÂåñÊü±Áä∂Âõæ ==========
function initBarChart() {
    const chartDom = document.getElementById('barChart');
    const myChart = echarts.init(chartDom, 'dark');
    charts.barChart = myChart;
    
    const option = {
        title: {
            text: 'È¢ÑË≠¶ÁªüËÆ°ÂàÜÊûê',
            textStyle: {
                color: '#00ffff',
                fontSize: 14
            }
        },
        tooltip: {
            trigger: 'axis',
            backgroundColor: 'rgba(0, 25, 50, 0.9)',
            borderColor: 'rgba(0, 255, 255, 0.3)',
            textStyle: {
                color: '#ccddff'
            }
        },
        legend: {
            data: ['ËìùËâ≤È¢ÑË≠¶', 'ÈªÑËâ≤È¢ÑË≠¶', 'Ê©ôËâ≤È¢ÑË≠¶', 'Á∫¢Ëâ≤È¢ÑË≠¶'],
            textStyle: {
                color: '#99ccff'
            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'category',
            data: ['ÊªëÂù°', 'Ê≥•Áü≥ÊµÅ', 'Â¥©Â°å', 'Âú∞Èô∑'],
            axisLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.3)'
                }
            },
            axisLabel: {
                color: '#99ccff'
            }
        },
        yAxis: {
            type: 'value',
            axisLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.3)'
                }
            },
            axisLabel: {
                color: '#99ccff'
            },
            splitLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.1)'
                }
            }
        },
        series: [
            {
                name: 'ËìùËâ≤È¢ÑË≠¶',
                type: 'bar',
                stack: 'È¢ÑË≠¶',
                data: [5, 3, 2, 1],
                itemStyle: {
                    color: '#1890FF'
                }
            },
            {
                name: 'ÈªÑËâ≤È¢ÑË≠¶',
                type: 'bar',
                stack: 'È¢ÑË≠¶',
                data: [3, 4, 2, 2],
                itemStyle: {
                    color: '#FADB14'
                }
            },
            {
                name: 'Ê©ôËâ≤È¢ÑË≠¶',
                type: 'bar',
                stack: 'È¢ÑË≠¶',
                data: [2, 2, 1, 1],
                itemStyle: {
                    color: '#FA8C16'
                }
            },
            {
                name: 'Á∫¢Ëâ≤È¢ÑË≠¶',
                type: 'bar',
                stack: 'È¢ÑË≠¶',
                data: [1, 1, 0, 0],
                itemStyle: {
                    color: '#FF4D4F'
                }
            }
        ]
    };
    
    myChart.setOption(option);
    
    // ÂìçÂ∫îÂºèË∞ÉÊï¥
    window.addEventListener('resize', function() {
        myChart.resize();
    });
}

// ========== ÂàùÂßãÂåñÁÉ≠ÂäõÂõæ ==========
function initHeatmapChart() {
    const chartDom = document.getElementById('heatmapChart');
    const myChart = echarts.init(chartDom, 'dark');
    charts.heatmapChart = myChart;
    
    // ÁîüÊàêÁÉ≠ÂäõÂõæÊï∞ÊçÆ
    const data = [];
    const hours = ['00', '02', '04', '06', '08', '10', '12', '14', '16', '18', '20', '22'];
    const days = ['Âë®‰∏Ä', 'Âë®‰∫å', 'Âë®‰∏â', 'Âë®Âõõ', 'Âë®‰∫î', 'Âë®ÂÖ≠', 'Âë®Êó•'];
    
    for (let i = 0; i < days.length; i++) {
        for (let j = 0; j < hours.length; j++) {
            data.push([j, i, Math.round(Math.random() * 100)]);
        }
    }
    
    const option = {
        title: {
            text: 'Âå∫ÂüüÈ£éÈô©ÁÉ≠ÂäõÂõæ',
            textStyle: {
                color: '#00ffff',
                fontSize: 14
            }
        },
        tooltip: {
            position: 'top',
            backgroundColor: 'rgba(0, 25, 50, 0.9)',
            borderColor: 'rgba(0, 255, 255, 0.3)',
            textStyle: {
                color: '#ccddff'
            }
        },
        grid: {
            height: '50%',
            top: '10%'
        },
        xAxis: {
            type: 'category',
            data: hours,
            splitArea: {
                show: true
            },
            axisLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.3)'
                }
            },
            axisLabel: {
                color: '#99ccff'
            }
        },
        yAxis: {
            type: 'category',
            data: days,
            splitArea: {
                show: true
            },
            axisLine: {
                lineStyle: {
                    color: 'rgba(0, 255, 255, 0.3)'
                }
            },
            axisLabel: {
                color: '#99ccff'
            }
        },
        visualMap: {
            min: 0,
            max: 100,
            calculable: true,
            orient: 'horizontal',
            left: 'center',
            bottom: '15%',
            textStyle: {
                color: '#99ccff'
            },
            inRange: {
                color: ['#00ff88', '#ffaa00', '#ff4444']
            }
        },
        series: [
            {
                name: 'È£éÈô©ÂÄº',
                type: 'heatmap',
                data: data,
                label: {
                    show: true,
                    color: '#000'
                },
                emphasis: {
                    itemStyle: {
                        shadowBlur: 10,
                        shadowColor: 'rgba(0, 255, 255, 0.5)'
                    }
                }
            }
        ]
    };
    
    myChart.setOption(option);
    
    // ÂìçÂ∫îÂºèË∞ÉÊï¥
    window.addEventListener('resize', function() {
        myChart.resize();
    });
}

// ========== ÁîüÊàêÈöèÊú∫Êï∞ÊçÆ ==========
function generateRandomData(count, min, max) {
    const data = [];
    for (let i = 0; i < count; i++) {
        data.push(Math.round(Math.random() * (max - min) + min));
    }
    return data;
}

// ========== Â∫îÁî®Á≠õÈÄâÂô® ==========
function applyFilters() {
    // Êî∂ÈõÜÁ≠õÈÄâÊù°‰ª∂
    const selectedPoints = Array.from(document.querySelectorAll('#monitoringPoints input:checked')).map(cb => cb.value);
    const selectedTypes = Array.from(document.querySelectorAll('#dataTypes input:checked')).map(cb => cb.value);
    const timeRange = document.getElementById('timeRange').value;
    const quality = document.querySelector('#dataQuality input:checked').value;
    
    currentFilters = {
        points: selectedPoints,
        types: selectedTypes,
        timeRange: timeRange,
        quality: quality
    };
    
    // Êõ¥Êñ∞ÂõæË°®Êï∞ÊçÆ
    updateChartsData();
    
    showToast('success', 'Á≠õÈÄâÊù°‰ª∂Â∑≤Â∫îÁî®');
}

// ========== ÈáçÁΩÆÁ≠õÈÄâÂô® ==========
function resetFilters() {
    // ÈáçÁΩÆÁõëÊµãÁÇπÈÄâÊã©
    document.querySelectorAll('#monitoringPoints input[type="checkbox"]').forEach((cb, index) => {
        cb.checked = index < 2; // ÈªòËÆ§ÈÄâ‰∏≠Ââç‰∏§‰∏™
    });
    
    // ÈáçÁΩÆÊï∞ÊçÆÁ±ªÂûãÈÄâÊã©
    document.querySelectorAll('#dataTypes input[type="checkbox"]').forEach((cb, index) => {
        cb.checked = index < 2; // ÈªòËÆ§ÈÄâ‰∏≠Ââç‰∏§‰∏™
    });
    
    // ÈáçÁΩÆÊó∂Èó¥ËåÉÂõ¥
    document.getElementById('timeRange').value = '1d';
    document.getElementById('customTimeRange').style.display = 'none';
    
    // ÈáçÁΩÆÊï∞ÊçÆË¥®Èáè
    document.querySelector('#dataQuality input[value="all"]').checked = true;
    
    // Ê∏ÖÁ©∫Á≠õÈÄâÊù°‰ª∂
    currentFilters = {};
    
    // Êõ¥Êñ∞ÂõæË°®Êï∞ÊçÆ
    updateChartsData();
    
    showToast('info', 'Á≠õÈÄâÊù°‰ª∂Â∑≤ÈáçÁΩÆ');
}

// ========== Êõ¥Êñ∞ÂõæË°®Êï∞ÊçÆ ==========
function updateChartsData() {
    // ËøôÈáåÂèØ‰ª•Ê†πÊçÆÁ≠õÈÄâÊù°‰ª∂ÈáçÊñ∞ÁîüÊàêÊï∞ÊçÆ
    // ‰∏∫‰∫ÜÊºîÁ§∫ÔºåÊàë‰ª¨Âè™ÊòØÈáçÊñ∞ËÆæÁΩÆ‰∏Ä‰∫õÈöèÊú∫Êï∞ÊçÆ
    
    // Êõ¥Êñ∞ÊäòÁ∫øÂõæ
    if (charts.lineChart) {
        const option = charts.lineChart.getOption();
        option.series[0].data = generateRandomData(24, 0, 10);
        option.series[1].data = generateRandomData(24, 0, 50);
        option.series[2].data = generateRandomData(24, 20, 80);
        charts.lineChart.setOption(option);
    }
    
    // Êõ¥Êñ∞È•ºÂõæ
    if (charts.pieChart) {
        const option = charts.pieChart.getOption();
        const total = 100;
        const normal = Math.round(Math.random() * 20 + 80);
        const abnormal = Math.round(Math.random() * 10 + 5);
        const offline = Math.round(Math.random() * 8 + 2);
        const maintenance = total - normal - abnormal - offline;
        
        option.series[0].data = [
            { value: normal, name: 'Ê≠£Â∏∏ËÆæÂ§á' },
            { value: abnormal, name: 'ÂºÇÂ∏∏ËÆæÂ§á' },
            { value: offline, name: 'Á¶ªÁ∫øËÆæÂ§á' },
            { value: maintenance, name: 'Áª¥Êä§ËÆæÂ§á' }
        ];
        charts.pieChart.setOption(option);
    }
    
    console.log('üìä ÂõæË°®Êï∞ÊçÆÂ∑≤Êõ¥Êñ∞');
}

// ========== Âà∑Êñ∞ÂõæË°® ==========
function refreshChart(chartId) {
    if (charts[chartId]) {
        updateChartsData();
        showToast('success', 'ÂõæË°®Êï∞ÊçÆÂ∑≤Âà∑Êñ∞');
    }
}

// ========== ÂÖ®Â±èÊòæÁ§∫ÂõæË°® ==========
function fullscreenChart(chartId) {
    const sourceChart = charts[chartId];
    if (!sourceChart) return;
    
    // Ëé∑ÂèñÂéüÂõæË°®ÈÖçÁΩÆ
    const option = sourceChart.getOption();
    
    // ÊòæÁ§∫Ê®°ÊÄÅÊ°Ü
    document.getElementById('chartModal').style.display = 'block';
    
    // ËÆæÁΩÆÊ†áÈ¢ò
    const titles = {
        'lineChart': 'ÂÆûÊó∂ÁõëÊµãÊï∞ÊçÆË∂ãÂäø',
        'pieChart': 'ËÆæÂ§áÁä∂ÊÄÅÂàÜÂ∏É',
        'barChart': 'È¢ÑË≠¶ÁªüËÆ°ÂàÜÊûê',
        'heatmapChart': 'Âå∫ÂüüÈ£éÈô©ÁÉ≠ÂäõÂõæ'
    };
    document.getElementById('modalChartTitle').textContent = titles[chartId] || 'ÂõæË°®ËØ¶ÊÉÖ';
    
    // ÂàùÂßãÂåñÂÖ®Â±èÂõæË°®
    setTimeout(() => {
        const modalChartDom = document.getElementById('modalChart');
        const modalChart = echarts.init(modalChartDom, 'dark');
        modalChart.setOption(option);
        
        // ‰øùÂ≠òÂºïÁî®‰ª•‰æøÂÖ≥Èó≠Êó∂ÈîÄÊØÅ
        window.modalChart = modalChart;
        
        // ÂìçÂ∫îÂºèË∞ÉÊï¥
        const resizeHandler = () => modalChart.resize();
        window.addEventListener('resize', resizeHandler);
        window.modalChartResizeHandler = resizeHandler;
    }, 100);
}

// ========== ÂÖ≥Èó≠ÂÖ®Â±èÂõæË°® ==========
function closeChartModal() {
    document.getElementById('chartModal').style.display = 'none';
    
    // ÈîÄÊØÅÂÖ®Â±èÂõæË°®
    if (window.modalChart) {
        window.modalChart.dispose();
        window.modalChart = null;
    }
    
    // ÁßªÈô§‰∫ã‰ª∂ÁõëÂê¨
    if (window.modalChartResizeHandler) {
        window.removeEventListener('resize', window.modalChartResizeHandler);
        window.modalChartResizeHandler = null;
    }
}

// ========== ÂØºÂá∫Êï∞ÊçÆ ==========
function exportData() {
    showToast('info', 'Ê≠£Âú®ÁîüÊàêÊä•Âëä...');
    
    // Ê®°ÊãüÂØºÂá∫ËøáÁ®ã
    setTimeout(() => {
        showToast('success', 'Êï∞ÊçÆÊä•ÂëäÂ∑≤ÂØºÂá∫');
    }, 2000);
}

// ========== ÂØºÂá∫Á≠õÈÄâÊï∞ÊçÆ ==========
function exportFilteredData() {
    if (Object.keys(currentFilters).length === 0) {
        showToast('warning', 'ËØ∑ÂÖàÂ∫îÁî®Á≠õÈÄâÊù°‰ª∂');
        return;
    }
    
    showToast('info', 'Ê≠£Âú®ÂØºÂá∫Á≠õÈÄâÊï∞ÊçÆ...');
    
    // Ê®°ÊãüÂØºÂá∫ËøáÁ®ã
    setTimeout(() => {
        showToast('success', 'Á≠õÈÄâÊï∞ÊçÆÂ∑≤ÂØºÂá∫');
    }, 1500);
}

// ========== ÂºÄÂßãËá™Âä®Êõ¥Êñ∞ ==========
function startAutoUpdate() {
    updateInterval = setInterval(() => {
        updateChartsData();
        updateLastUpdateTime();
        updateOverviewCards();
    }, 30000); // 30ÁßíÊõ¥Êñ∞‰∏ÄÊ¨°
}

// ========== ÂÅúÊ≠¢Ëá™Âä®Êõ¥Êñ∞ ==========
function stopAutoUpdate() {
    if (updateInterval) {
        clearInterval(updateInterval);
        updateInterval = null;
    }
}

// ========== Êõ¥Êñ∞ÊúÄÂêéÊõ¥Êñ∞Êó∂Èó¥ ==========
function updateLastUpdateTime() {
    const now = new Date();
    const timeString = now.toLocaleString('zh-CN', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    document.getElementById('lastUpdateTime').textContent = timeString;
}

// ========== Êõ¥Êñ∞Ê¶ÇËßàÂç°Áâá ==========
function updateOverviewCards() {
    // Ê®°ÊãüÊï∞ÊçÆÊõ¥Êñ∞
    const onlineRate = (Math.random() * 5 + 95).toFixed(1);
    const integrityRate = (Math.random() * 10 + 90).toFixed(1);
    const abnormalRate = (Math.random() * 3 + 1).toFixed(1);
    
    document.getElementById('onlineDevices').textContent = onlineRate + '%';
    document.getElementById('dataIntegrity').textContent = integrityRate + '%';
    document.getElementById('abnormalData').textContent = abnormalRate + '%';
}

// ========== ÂÖ®Â±èÂàáÊç¢ ==========
function toggleFullscreen() {
    if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen();
    } else {
        document.exitFullscreen();
    }
}

// ========== ÊòæÁ§∫ÊèêÁ§∫Ê∂àÊÅØ ==========
function showToast(type, message) {
    // ÂàõÂª∫toastÂÖÉÁ¥†
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.textContent = message;
    
    // Ê∑ªÂä†Ê†∑Âºè
    Object.assign(toast.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        padding: '12px 20px',
        borderRadius: '8px',
        color: '#fff',
        fontWeight: '500',
        zIndex: '3000',
        opacity: '0',
        transform: 'translateX(100%)',
        transition: 'all 0.3s ease'
    });
    
    // ËÆæÁΩÆËÉåÊôØËâ≤
    const colors = {
        success: '#00ff88',
        error: '#ff4444',
        warning: '#ffaa00',
        info: '#00ffff'
    };
    toast.style.background = colors[type] || colors.info;
    
    // Ê∑ªÂä†Âà∞È°µÈù¢
    document.body.appendChild(toast);
    
    // ÊòæÁ§∫Âä®Áîª
    setTimeout(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateX(0)';
    }, 100);
    
    // Ëá™Âä®ÈöêËóè
    setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (document.body.contains(toast)) {
                document.body.removeChild(toast);
            }
        }, 300);
    }, 3000);
}

// ========== ‰∫ã‰ª∂ÁõëÂê¨ ==========

// ÁÇπÂáªÊ®°ÊÄÅÊ°ÜÂ§ñÈÉ®ÂÖ≥Èó≠
window.addEventListener('click', function(event) {
    const modal = document.getElementById('chartModal');
    if (event.target === modal) {
        closeChartModal();
    }
});

// ESCÈîÆÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeChartModal();
    }
});

// È°µÈù¢Âç∏ËΩΩÊó∂Ê∏ÖÁêÜ
window.addEventListener('beforeunload', function() {
    stopAutoUpdate();
    
    // ÈîÄÊØÅÊâÄÊúâÂõæË°®
    Object.values(charts).forEach(chart => {
        if (chart) {
            chart.dispose();
        }
    });
});
